def mergesort(arr, temp_arr, start, end):
    inv_count = 0
    if start<end:
        half = (start+end)//2
        inv_count += mergesort(arr, temp_arr, start, half)
        inv_count += mergesort(arr, temp_arr, half+1, end)
        inv_count += merge(arr, temp_arr, start, half, end)
    return inv_count

def merge(arr, temp_arr, left, mid, right):
    inv_count = 0
    i = left
    j = mid+1
    k = left
    while i<= mid and j<=right:
        if arr[i]<=arr[j]:
            temp_arr[k] = arr[i]
            i += 1
            k += 1
        else:
            inv_count += mid - i + 1
            temp_arr[k] = arr[j]
            j += 1
            k += 1
    
    while i<=mid:
        temp_arr[k] = arr[i]
        k += 1
        i += 1

    while j<=right:
        temp_arr[k] = arr[j]
        k += 1
        j += 1

    for i in range(left, right+1):
        arr[i] = temp_arr[i] 
    return inv_count

def countInversions(arr):
    temp_arr = [0]*n
    return mergesort(arr, temp_arr, 0, len(arr)-1)
