class Stack(object):

    def __init__(self):
        """Initialize an empty stack"""
        self.items = []

    def push(self, item):
        """Push a new item onto the stack"""
        self.items.append(item)

    def pop(self):
        """Remove and return the last item"""
        # If the stack is empty, return None
        # (it would also be reasonable to throw an exception)
        if self.isempty():
            return None

        return self.items.pop()
    
    def isempty(self):
        if self.items == []:
            return True
        else:
            return False
        
    def peek(self):
        if self.isempty():
            return None
        else:
            return self.items[-1]

class MyQueue(object):
    def __init__(self):
        self.stack1 = Stack()
        self.stack2 = Stack()
    
    def peek(self):
        if self.stack1.isempty() and self.stack2.isempty():
            raise ValueError()
        elif self.stack1.isempty() and not self.stack2.isempty():
            return self.stack2.peek()
        elif not self.stack1.isempty() and self.stack2.isempty():
            while not self.stack1.isempty():
                out = self.stack1.pop()
                self.stack2.push(out)
            return self.stack2.peek()
        else:
            return self.stack2.peek()
        
    def pop(self):
        if self.stack1.isempty() and self.stack2.isempty():
            raise ValueError()
        elif self.stack1.isempty() and not self.stack2.isempty():
            return self.stack2.pop()
        elif not self.stack1.isempty() and self.stack2.isempty():
            while not self.stack1.isempty():
                out = self.stack1.pop()
                self.stack2.push(out)
            return self.stack2.pop()
        else:
            return self.stack2.pop()
        
    def put(self, value):
        self.stack1.push(value)

queue = MyQueue()
t = int(input())
for line in range(t):
    values = map(int, input().split())
    values = list(values)
    if values[0] == 1:
        queue.put(values[1])        
    elif values[0] == 2:
        queue.pop()
    else:
        print(queue.peek())
