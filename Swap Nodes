from collections import deque
  
class BTree:
    def __init__(self,v):
        self.value = v
        self.left = None
        self.right = None
        
    def inorder(self):
        if self.value==None:
            return([])
        if self.left == None:
            ls = []
        else:
            ls = self.left.inorder()
        if self.right == None:
            rs = []
        else:
            rs = self.right.inorder()
        
        return (ls + [self.value] + rs)
    

def swap(root,k):
    q = deque([(root, 1)])
    while q:
        node, level = q.popleft()
        if node is None:
            continue
        if level%k==0:
            node.left, node.right = node.right, node.left
        q.append((node.left, level+1))
        q.append((node.right, level+1))
        
    
    
def swapNodes(indexes, queries):
    N = len(indexes)
    # create node list
    nodes = [None]*(N+1)
    for i in range(1, N+1):
        n = BTree(i)
        n.left_index, n.right_index = [v if v > 0 else 0 for v in indexes[i-1]]
        nodes[i] = n
    
    # fill out node objects
    for n in nodes[1:]:
        left = nodes[n.left_index]
        right = nodes[n.right_index]
        n.left = left
        n.right = right
    
    root = nodes[1]
    
    res = []
    
    for q in queries:
        swap(root, q)
        res.append(root.inorder())
    
    return res
