N, M, K = list(map(int,input().split()))

G = {}
for i in range(1,N+1):
    G[i] = set()
    
lines = 1
while lines<=M:
    y = list(map(int,input().split()))
    G[y[0]] = G[y[0]] | {y[1]}
    G[y[1]] = G[y[1]] | {y[0]}
    lines += 1

def bfs(graph, start):
    visited, queue = set(), [start]
    while queue:
        vertex = queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            queue.extend(graph[vertex] - visited)
    return visited

nodes = set(G.keys())
connected_comps = []
marked = set()
for u in nodes:
    if u in marked:
        continue
    visited = bfs(G,u)
    marked = marked | visited
    connected_comps.append(visited)
    
if len(connected_comps)>K:
    print(-1)
else:
    conn_comp_edges = {}
    for i in range(len(connected_comps)):
        c = connected_comps[i]
        summ = 0
        for u in c:
            summ = summ + len(G[u])
        conn_comp_edges[i] = summ//2
    maxx = 0
    for c in conn_comp_edges.keys():
        e = conn_comp_edges[c]
        if e == 0:
            critical = 0
        else:
            critical = len(connected_comps[c]) - 1
        maxx = maxx + (e-critical)
    maxx = maxx + (K-len(connected_comps))
    print(maxx)
