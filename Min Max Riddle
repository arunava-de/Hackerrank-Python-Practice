class Stack(object):

    def __init__(self):
        """Initialize an empty stack"""
        self.items = []

    def push(self, item):
        """Push a new item onto the stack"""
        self.items.append(item)

    def pop(self):
        """Remove and return the last item"""
        # If the stack is empty, return None
        # (it would also be reasonable to throw an exception)
        if self.isempty():
            return None

        return self.items.pop()
    
    def isempty(self):
        if self.items == []:
            return True
        else:
            return False
    
    def peek(self):
        if self.isempty():
            return None
        else:
            return self.items[-1]

def riddle(arr):
    s = Stack()
    n = len(arr)
    
    window_size = {}
    i = 0
    arr.append(0)
    while i<n+1:
        if s.isempty() or arr[i]>arr[s.peek()]:
            s.push(i)
            i += 1
        else:
            t = s.pop()
            if s.isempty():
                window_size[t] = i
            else:
                window_size[t] = i-s.peek()-1
    arr.pop(-1)
    temp = {}
    for i in range(n):
        if arr[i] not in temp.keys():
            temp[arr[i]] = window_size[i]
        else:
            temp[arr[i]] = max(window_size[i],temp[arr[i]])
            
    inv_window = {}
    for i in temp.keys():
        w = temp[i]
        if w in inv_window.keys():
            if i>inv_window[w]:
                inv_window[w] = i
        else:
            inv_window[w] = i
    
    maxes = [inv_window[n]]
    for i in range(n-1,0,-1):
        if i not in inv_window.keys():
            maxes.append(maxes[-1])
        elif inv_window[i]<maxes[-1]:
            maxes.append(maxes[-1])
        else:
            maxes.append(inv_window[i])
            
    maxes.reverse()
    return maxes
